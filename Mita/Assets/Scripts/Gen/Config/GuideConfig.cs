//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace cfg.Config
{
public sealed partial class GuideConfig :  Bright.Config.BeanBase 
{
    public GuideConfig(ByteBuf _buf) 
    {
        Tag = _buf.ReadString();
        StartCondition = _buf.ReadInt();
        StartConditionParam = _buf.ReadString();
        StartConditionParam2 = _buf.ReadString();
        FailCondition = _buf.ReadInt();
        FailConditionParam = _buf.ReadString();
        FailConditionParam2 = _buf.ReadString();
        NextStep = _buf.ReadString();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Recover = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); Recover[__index0] = __e0;}}
        Keystep = _buf.ReadString();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Content = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); Content[__index0] = __e0;}}
        PostInit();
    }

    public static GuideConfig DeserializeGuideConfig(ByteBuf _buf)
    {
        return new Config.GuideConfig(_buf);
    }

    /// <summary>
    /// tag
    /// </summary>
    public string Tag { get; private set; }
    /// <summary>
    /// 触发条件类型
    /// </summary>
    public int StartCondition { get; private set; }
    /// <summary>
    /// 触发条件参数
    /// </summary>
    public string StartConditionParam { get; private set; }
    /// <summary>
    /// 触发条件参数2
    /// </summary>
    public string StartConditionParam2 { get; private set; }
    /// <summary>
    /// 失败条件类型
    /// </summary>
    public int FailCondition { get; private set; }
    /// <summary>
    /// 失败条件参数
    /// </summary>
    public string FailConditionParam { get; private set; }
    /// <summary>
    /// 失败条件参数2
    /// </summary>
    public string FailConditionParam2 { get; private set; }
    /// <summary>
    /// 下一步
    /// </summary>
    public string NextStep { get; private set; }
    /// <summary>
    /// 恢复步骤
    /// </summary>
    public string[] Recover { get; private set; }
    /// <summary>
    /// 关键步骤
    /// </summary>
    public string Keystep { get; private set; }
    /// <summary>
    /// 步骤
    /// </summary>
    public string[] Content { get; private set; }

    public const int __ID__ = -821475150;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Tag:" + Tag + ","
        + "StartCondition:" + StartCondition + ","
        + "StartConditionParam:" + StartConditionParam + ","
        + "StartConditionParam2:" + StartConditionParam2 + ","
        + "FailCondition:" + FailCondition + ","
        + "FailConditionParam:" + FailConditionParam + ","
        + "FailConditionParam2:" + FailConditionParam2 + ","
        + "NextStep:" + NextStep + ","
        + "Recover:" + Bright.Common.StringUtil.CollectionToString(Recover) + ","
        + "Keystep:" + Keystep + ","
        + "Content:" + Bright.Common.StringUtil.CollectionToString(Content) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}