//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace cfg.Config
{
public sealed partial class SanXiaoItem :  Bright.Config.BeanBase 
{
    public SanXiaoItem(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);KindPrefab = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); KindPrefab[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);StartPos = new UnityEngine.Vector2[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { UnityEngine.Vector2 __e0;__e0 = _buf.ReadUnityVector2(); StartPos[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Area = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); Area[__index0] = __e0;}}
        FillTime = _buf.ReadFloat();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Wall = new UnityEngine.Vector2[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { UnityEngine.Vector2 __e0;__e0 = _buf.ReadUnityVector2(); Wall[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Barrier = new UnityEngine.Vector2[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { UnityEngine.Vector2 __e0;__e0 = _buf.ReadUnityVector2(); Barrier[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BarrierHp = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); BarrierHp[__index0] = __e0;}}
        Star1Score = _buf.ReadInt();
        Star2Score = _buf.ReadInt();
        Star3Score = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);InitialMatrix = new int[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { int __e0;__e0 = _buf.ReadInt(); InitialMatrix[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ThingsConfigs = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); ThingsConfigs[__index0] = __e0;}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SweetOffset = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); SweetOffset[__index0] = __e0;}}
        PostInit();
    }

    public static SanXiaoItem DeserializeSanXiaoItem(ByteBuf _buf)
    {
        return new Config.SanXiaoItem(_buf);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 物品种类
    /// </summary>
    public int[] KindPrefab { get; private set; }
    /// <summary>
    /// 起始方格坐标整体偏移量
    /// </summary>
    public UnityEngine.Vector2[] StartPos { get; private set; }
    /// <summary>
    /// 场地面积
    /// </summary>
    public string[] Area { get; private set; }
    /// <summary>
    /// 填充时间
    /// </summary>
    public float FillTime { get; private set; }
    /// <summary>
    /// 屏障墙坐标
    /// </summary>
    public UnityEngine.Vector2[] Wall { get; private set; }
    /// <summary>
    /// 障碍物坐标
    /// </summary>
    public UnityEngine.Vector2[] Barrier { get; private set; }
    /// <summary>
    /// 障碍物血量
    /// </summary>
    public int[] BarrierHp { get; private set; }
    /// <summary>
    /// 一星分数达标
    /// </summary>
    public int Star1Score { get; private set; }
    /// <summary>
    /// 二星分数达标
    /// </summary>
    public int Star2Score { get; private set; }
    /// <summary>
    /// 三星分数达标
    /// </summary>
    public int Star3Score { get; private set; }
    /// <summary>
    /// 初始化场景物品
    /// </summary>
    public int[] InitialMatrix { get; private set; }
    /// <summary>
    /// 道具物品数量
    /// </summary>
    public string[] ThingsConfigs { get; private set; }
    /// <summary>
    /// 主矩阵坐标偏移量
    /// </summary>
    public string[] SweetOffset { get; private set; }

    public const int __ID__ = -1048144410;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "KindPrefab:" + Bright.Common.StringUtil.CollectionToString(KindPrefab) + ","
        + "StartPos:" + Bright.Common.StringUtil.CollectionToString(StartPos) + ","
        + "Area:" + Bright.Common.StringUtil.CollectionToString(Area) + ","
        + "FillTime:" + FillTime + ","
        + "Wall:" + Bright.Common.StringUtil.CollectionToString(Wall) + ","
        + "Barrier:" + Bright.Common.StringUtil.CollectionToString(Barrier) + ","
        + "BarrierHp:" + Bright.Common.StringUtil.CollectionToString(BarrierHp) + ","
        + "Star1Score:" + Star1Score + ","
        + "Star2Score:" + Star2Score + ","
        + "Star3Score:" + Star3Score + ","
        + "InitialMatrix:" + Bright.Common.StringUtil.CollectionToString(InitialMatrix) + ","
        + "ThingsConfigs:" + Bright.Common.StringUtil.CollectionToString(ThingsConfigs) + ","
        + "SweetOffset:" + Bright.Common.StringUtil.CollectionToString(SweetOffset) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}