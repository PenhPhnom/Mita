//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace cfg.Config
{
public sealed partial class GuideDetailConfig :  Bright.Config.BeanBase 
{
    public GuideDetailConfig(ByteBuf _buf) 
    {
        Tag = _buf.ReadString();
        FinConditionType = _buf.ReadInt();
        FinConditionParam = _buf.ReadString();
        FinConditionParam2 = _buf.ReadString();
        InputMaskTargetType = _buf.ReadInt();
        InputMaskTargetParam = _buf.ReadString();
        InputMaskTargetParam2 = _buf.ReadString();
        TriggerStartEvent = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);EventStartParams = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); EventStartParams[__index0] = __e0;}}
        TriggerOverEvent = _buf.ReadInt();
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);EventOverParams = new string[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { string __e0;__e0 = _buf.ReadString(); EventOverParams[__index0] = __e0;}}
        GuideLog = _buf.ReadString();
        FinishGuideLog = _buf.ReadString();
        GuideShow = _buf.ReadString();
        PostInit();
    }

    public static GuideDetailConfig DeserializeGuideDetailConfig(ByteBuf _buf)
    {
        return new Config.GuideDetailConfig(_buf);
    }

    /// <summary>
    /// tag
    /// </summary>
    public string Tag { get; private set; }
    /// <summary>
    /// 完成条件类型
    /// </summary>
    public int FinConditionType { get; private set; }
    /// <summary>
    /// 完成条件参数
    /// </summary>
    public string FinConditionParam { get; private set; }
    /// <summary>
    /// 完成条件参数
    /// </summary>
    public string FinConditionParam2 { get; private set; }
    /// <summary>
    /// 输入控制 与 EGuideTargetType 相映射
    /// </summary>
    public int InputMaskTargetType { get; private set; }
    /// <summary>
    /// 输入控制参数
    /// </summary>
    public string InputMaskTargetParam { get; private set; }
    /// <summary>
    /// 输入控制参数2
    /// </summary>
    public string InputMaskTargetParam2 { get; private set; }
    /// <summary>
    /// 引导开启时的触发事件
    /// </summary>
    public int TriggerStartEvent { get; private set; }
    /// <summary>
    /// 触发事件参数
    /// </summary>
    public string[] EventStartParams { get; private set; }
    /// <summary>
    /// 引导结束时的触发事件
    /// </summary>
    public int TriggerOverEvent { get; private set; }
    /// <summary>
    /// 触发事件参数
    /// </summary>
    public string[] EventOverParams { get; private set; }
    /// <summary>
    /// 启动该步打点ID
    /// </summary>
    public string GuideLog { get; private set; }
    /// <summary>
    /// 完成该步打点ID
    /// </summary>
    public string FinishGuideLog { get; private set; }
    /// <summary>
    /// 引导展示
    /// </summary>
    public string GuideShow { get; private set; }

    public const int __ID__ = -1185859485;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Tag:" + Tag + ","
        + "FinConditionType:" + FinConditionType + ","
        + "FinConditionParam:" + FinConditionParam + ","
        + "FinConditionParam2:" + FinConditionParam2 + ","
        + "InputMaskTargetType:" + InputMaskTargetType + ","
        + "InputMaskTargetParam:" + InputMaskTargetParam + ","
        + "InputMaskTargetParam2:" + InputMaskTargetParam2 + ","
        + "TriggerStartEvent:" + TriggerStartEvent + ","
        + "EventStartParams:" + Bright.Common.StringUtil.CollectionToString(EventStartParams) + ","
        + "TriggerOverEvent:" + TriggerOverEvent + ","
        + "EventOverParams:" + Bright.Common.StringUtil.CollectionToString(EventOverParams) + ","
        + "GuideLog:" + GuideLog + ","
        + "FinishGuideLog:" + FinishGuideLog + ","
        + "GuideShow:" + GuideShow + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}